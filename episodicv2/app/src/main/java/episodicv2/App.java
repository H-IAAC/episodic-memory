/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package episodicv2;

import episodicv2.Codelets.CA1Process1Codelet;
import episodicv2.Codelets.CA3Process1Codelet;
import episodicv2.Codelets.DGStorageHandlerCodelet;
import episodicv2.Codelets.PRCStorageHandlerCodelet;
import episodicv2.Codelets.CA3StorageHandlerCodelet;
import episodicv2.Codelets.DGProcessCodelet;
import episodicv2.Codelets.PRCProcess2Codelet;
import episodicv2.Codelets.VisionCodelet;
import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.core.entities.Mind;
import br.unicamp.cst.io.rest.RESTServer;
import br.unicamp.cst.util.viewer.MindViewer;
import br.unicamp.cst.representation.idea.Idea;
import episodicv2.Codelets.DGBridgeComposedCodelet;
import episodicv2.Codelets.PPCPHCITCCodelet;
import episodicv2.Connection.ConnectionCodelet;
import static episodicv2.configuration.Configuration.*;
import java.util.ArrayList; 
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public final class App {
    
    Mind m1;
    
    private void createAndShowGUI(Mind m) {
        MindViewer mv = new MindViewer(m,"MindViewer",m.getCodeletGroupList("Motor"));
        mv.setVisible(true);
    } 
    
    public Mind prepareMind() {
        m1 = new Mind();
                
        //declare Ideas
        //TODO: review as categorias
        Idea centerPointsandClassesIdea = new Idea(CENTER_POINTS_CLASSES_IDEA, null,CATEGORY_PROPERTY,1);
        Idea recognizedObjectsSpikeIdea = new Idea(RECOGNIZED_OBJECTS_SPIKE_IDEA, null,CATEGORY_PROPERTY,1);
        Idea recognizedObjectsSpikeAndunintegratedScenePatternIdea = new Idea(RECOGNIZED_OBJECTS_SPIKE_AND_UNINTEGRATED_SCENE_PATTERN_IDEA, null,CATEGORY_PROPERTY,1);
        Idea newEncodedSceneSpikeIdea = new Idea(NEW_ENCODED_SCENE_SPIKE_IDEA,null,CATEGORY_PROPERTY,1);
        Idea midTermMemoryObjectRelationsIdea = new Idea(PRC_MID_TERM_OBJECT_RELATIONS_IDEA,null,CATEGORY_PROPERTY,1);
        Idea dgMidTermMemoryScenesIdea = new Idea(DG_MID_TERM_MEMORY_SCENES_IDEA,null,CATEGORY_PROPERTY,1);
        Idea dgSizeMidIdea = new Idea(DG_SIZE_IDEA,0,CATEGORY_PROPERTY,1);
        dgMidTermMemoryScenesIdea.add(dgSizeMidIdea);
        
        Idea patternReplacedIdea = new Idea(PATTERN_REPLACED_IDEA,null,CATEGORY_PROPERTY,1);
        
        Idea recentNewEncodedSceneSpikeIdea = new Idea(RECENT_NEW_ENCODED_SCENE_SPIKE_IDEA,null,CATEGORY_PROPERTY,1);
        Idea newEncodedSceneToStoreIdea = new Idea(NEW_ENCODED_SCENE_TO_STORE_IDEA,null,CATEGORY_PROPERTY,1);
        Idea sceneRelationVertexToStoreIdea = new Idea(SCENE_RELATION_VERTEX_TO_STORE_IDEA,null,CATEGORY_PROPERTY,1);
        
        
        Idea dgMemoyScenesIdea = new Idea(DG_MEMORY_SCENES_IDEA, new ArrayList<String>(), CATEGORY_PROPERTY, 1);
        Idea dgSizeIdea = new Idea(DG_SIZE_IDEA, 0,CATEGORY_PROPERTY,1);
        Idea dgDataIdea = new Idea(DG_DATA_IDEA,null,CATEGORY_PROPERTY,1);
        dgDataIdea.add(dgMemoyScenesIdea);
        dgDataIdea.add(dgSizeIdea);
        
        
        Idea ca3MemoryScenesIdea = new Idea(CA3_MEMORY_SCENES_IDEA, new ArrayList<String>(), CATEGORY_PROPERTY, 1);

        Idea rootIdea = new Idea(ROOT_IDEA, null, CATEGORY_PROPERTY, 1);
        rootIdea.add(dgDataIdea);
        rootIdea.add(ca3MemoryScenesIdea);
        
        Idea prcDataRelationsIdea = new Idea(PRC_DATA_RELATIONS_IDEA,null,CATEGORY_PROPERTY,1);
        Idea prcDataAffectIdea = new Idea(PRC_DATA_AFFECT_IDEA,null,CATEGORY_PROPERTY,1);
        Idea prcDataIdea = new Idea(PRC_DATA_IDEA, null,CATEGORY_PROPERTY,1);
        
        prcDataIdea.add(prcDataRelationsIdea);
        prcDataIdea.add(prcDataAffectIdea);
        rootIdea.add(prcDataIdea);
        
        MemoryObject rootMO;
        rootMO = m1.createMemoryObject(ROOT_MO);
        rootMO.setI(rootIdea);
        
        MemoryObject centerPointsandClassesMO;
        centerPointsandClassesMO = m1.createMemoryObject(CENTER_POINTS_CLASSES_MO);
        centerPointsandClassesMO.setI(centerPointsandClassesIdea);
        
        MemoryObject recognizedObjectsSpikeMO;
        recognizedObjectsSpikeMO = m1.createMemoryObject(RECOGNIZED_OBJECTS_SPIKE_MO);
        recognizedObjectsSpikeMO.setI(recognizedObjectsSpikeIdea);
        
        MemoryObject recognizedObjectsSpikeAndunintegratedScenePatternMO;
        recognizedObjectsSpikeAndunintegratedScenePatternMO = m1.createMemoryObject(RECOGNIZED_OBJECTS_SPIKE_AND_UNINTEGRATED_SCENE_PATTERN_MO);
        recognizedObjectsSpikeAndunintegratedScenePatternMO.setI(recognizedObjectsSpikeAndunintegratedScenePatternIdea);
        
        MemoryObject newEncodedSceneSpikeMO;
        newEncodedSceneSpikeMO = m1.createMemoryObject(NEW_ENCODED_SCENE_SPIKE_MO);
        newEncodedSceneSpikeMO.setI(newEncodedSceneSpikeIdea);
        
        MemoryObject pRCMidTermMemoryObjectRelationsMO;
        pRCMidTermMemoryObjectRelationsMO = m1.createMemoryObject(PRC_MID_TERM_OBJECT_RELATIONS_MO);
        pRCMidTermMemoryObjectRelationsMO.setI(midTermMemoryObjectRelationsIdea);
        
        MemoryObject patternReplacedMO;
        patternReplacedMO = m1.createMemoryObject(PATTERN_REPLACED_MO);
        patternReplacedMO.setI(patternReplacedIdea);
        
        MemoryObject dgMidTermMemoryScenesMO;
        dgMidTermMemoryScenesMO = m1.createMemoryObject(DG_MID_TERM_MEMORY_SCENES_MO);
        dgMidTermMemoryScenesMO.setI(dgMidTermMemoryScenesIdea);
        
        MemoryObject recentNewEncodedSceneSpikeMO;
        recentNewEncodedSceneSpikeMO = m1.createMemoryObject(RECENT_NEW_ENCODED_SCENE_SPIKE_MO);
        recentNewEncodedSceneSpikeMO.setI(recentNewEncodedSceneSpikeIdea);
        
        MemoryObject newEncodedSceneToStoreMO;
        newEncodedSceneToStoreMO = m1.createMemoryObject(NEW_ENCODED_SCENE_TO_STORE_MO);
        newEncodedSceneToStoreMO.setI(newEncodedSceneToStoreIdea);
        
        MemoryObject sceneRelationVertexToStoreMO;
        sceneRelationVertexToStoreMO = m1.createMemoryObject(SCENE_RELATION_VERTEX_TO_STORE_MO);
        sceneRelationVertexToStoreMO.setI(sceneRelationVertexToStoreIdea);
        
        
        //Create Memory Objects
        Idea socketConnectionPortIdea = new Idea(SOCKET_CONNECTION_PORT_IDEA, 10000, CATEGORY_PROPERTY, 1);
        MemoryObject socketConnectionPortMO;
        socketConnectionPortMO = m1.createMemoryObject(SOCKET_CONNECTION_PORT_MO);
        socketConnectionPortMO.setI(socketConnectionPortIdea);
        
        Idea imageReceivedFromConnectionIdea = new Idea(IMAGE_RECEIVED_FROM_CONNECTION_IDEA, null, CATEGORY_PROPERTY, 1);
        MemoryObject imageReceivedFromConnectionMO;
        imageReceivedFromConnectionMO = m1.createMemoryObject(IMAGE_RECEIVED_FROM_CONNECTION_MO);
        imageReceivedFromConnectionMO.setI(imageReceivedFromConnectionIdea);
        
        Codelet connectionCodelet = new ConnectionCodelet();
        connectionCodelet.setName(CONNECTION_CODELET_NAME);
        connectionCodelet.addInput(socketConnectionPortMO);
        connectionCodelet.addOutput(imageReceivedFromConnectionMO);
        m1.insertCodelet(connectionCodelet);
        
        //Gets the image and returns objects points and classes
        VisionCodelet visionCodelet1 = new VisionCodelet();
        visionCodelet1.setName(VISION_CODELET_NAME);
        visionCodelet1.addInput(imageReceivedFromConnectionMO);
        visionCodelet1.addOutput(centerPointsandClassesMO);
        m1.insertCodelet(visionCodelet1, VISION_CODELET_GROUP);
        // VISION -> PPC -> PHC -> DG
        // VISION -> ITC -> DG
        
        //Compile PPC, PHC and ITC
        PPCPHCITCCodelet ppcPhcItcCodelet = new PPCPHCITCCodelet();
        ppcPhcItcCodelet.setName(PPC_PHC_ITC_CODELET_NAME);
        ppcPhcItcCodelet.addInput(centerPointsandClassesMO);
        ppcPhcItcCodelet.addOutput(recognizedObjectsSpikeAndunintegratedScenePatternMO);
        ppcPhcItcCodelet.addOutput(recognizedObjectsSpikeMO);
        m1.insertCodelet(ppcPhcItcCodelet, COMPILED_PPC_PHC_ITC_CODELET_GROUP);
        
        
        //Gets the image center points
        
        PRCProcess2Codelet pRCProcess2 = new PRCProcess2Codelet();
        pRCProcess2.setName(PRC_PROCESS_2_CODELET_NAME);
        pRCProcess2.addInput(recognizedObjectsSpikeMO);
        pRCProcess2.addOutput(pRCMidTermMemoryObjectRelationsMO);
        m1.insertCodelet(pRCProcess2, VENTRAL_CODELET_GROUP);
        
        PRCStorageHandlerCodelet pRCStorageHandlerCodelet = new PRCStorageHandlerCodelet();
        pRCStorageHandlerCodelet.setName(PRC_STORAGE_HANDLER_CODELET_NAME);
        pRCStorageHandlerCodelet.addInput(rootMO);
        pRCStorageHandlerCodelet.addInput(pRCMidTermMemoryObjectRelationsMO);
        pRCStorageHandlerCodelet.addOutput(rootMO);
        m1.insertCodelet(pRCStorageHandlerCodelet, VENTRAL_CODELET_GROUP);
        
        DGBridgeComposedCodelet dGBridgeComposedCodelet = new DGBridgeComposedCodelet();
        dGBridgeComposedCodelet.setName(DG_BRIDGE_COMPOSED_CODELET_NAME);
        dGBridgeComposedCodelet.addInput(recognizedObjectsSpikeAndunintegratedScenePatternMO);
        dGBridgeComposedCodelet.addOutput(patternReplacedMO);
        m1.insertCodelet(dGBridgeComposedCodelet, DG_CODELET_GROUP);

        DGProcessCodelet dGProcessCodelet = new DGProcessCodelet(false);
        dGProcessCodelet.setName(DG_PROCESS_CODELET_NAME);
        dGProcessCodelet.addInput(rootMO);
        dGProcessCodelet.addInput(patternReplacedMO);
        dGProcessCodelet.addOutput(newEncodedSceneSpikeMO);
        dGProcessCodelet.addOutput(dgMidTermMemoryScenesMO);
        m1.insertCodelet(dGProcessCodelet, DG_CODELET_GROUP);
        
        DGStorageHandlerCodelet dGStorageHandlerCodelet = new DGStorageHandlerCodelet();
        dGStorageHandlerCodelet.setName(DG_STORAGE_CODELET_NAME);
        dGStorageHandlerCodelet.addInput(rootMO);
        dGStorageHandlerCodelet.addInput(dgMidTermMemoryScenesMO);
        dGStorageHandlerCodelet.addOutput(rootMO);
        m1.insertCodelet(dGStorageHandlerCodelet, DG_CODELET_GROUP);
        
        CA3Process1Codelet cA3Process1Codelet=new CA3Process1Codelet();
        cA3Process1Codelet.setName(CA3_PROCESS_1_CODELET_NAME);
        cA3Process1Codelet.addInput(newEncodedSceneSpikeMO);
        cA3Process1Codelet.addOutput(recentNewEncodedSceneSpikeMO);
        cA3Process1Codelet.addOutput(newEncodedSceneToStoreMO);
        m1.insertCodelet(cA3Process1Codelet, CA3_CODELET_GROUP);
              
        CA3StorageHandlerCodelet cA3StorageHandlerCodelet=new CA3StorageHandlerCodelet();
        cA3StorageHandlerCodelet.setName(CA3_STORAGE_HANDLER_CODELET_NAME);
        cA3StorageHandlerCodelet.addInput(newEncodedSceneToStoreMO);
        cA3StorageHandlerCodelet.addInput(rootMO);
        cA3StorageHandlerCodelet.addOutput(rootMO);
        m1.insertCodelet(cA3StorageHandlerCodelet, CA3_CODELET_GROUP);
       
        CA1Process1Codelet cA1Process1Codelet=new CA1Process1Codelet();
        cA1Process1Codelet.setName(CA1_PROCESS_1_CODELET_NAME);
        cA1Process1Codelet.addInput(recentNewEncodedSceneSpikeMO);
        cA1Process1Codelet.addOutput(sceneRelationVertexToStoreMO);
        m1.insertCodelet(cA1Process1Codelet, CA1_CODELET_GROUP);
        
//        Codelet cA1Process2=new CA1Process2();
//        cA1Process2.setName("CA1_PROCESS_2_CODELET_NAME");
//        m1.insertCodelet(cA1Process2, CA1_CODELET_GROUP);
//        
//        CA1StorageHandlerCodelet cA1StorageHandlerCodelet=new CA1StorageHandlerCodelet();
//        cA1StorageHandlerCodelet.setName("CA1_STORAGE_HANDLER_CODELET_NAME");
//        cA1StorageHandlerCodelet.addInput(sceneRelationVertexToStoreMO);
//        cA1StorageHandlerCodelet.addInput(rootMO);
//        cA1StorageHandlerCodelet.addOutput(rootMO);
//        m1.insertCodelet(cA1StorageHandlerCodelet, CA1_CODELET_GROUP);
        
        m1.start();
        
        return(m1);
    }
    
    public App() {
        Mind m = prepareMind();
        // The next line can be commented if you don't want the Desktop MindViewer
        createAndShowGUI(m);
    }
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting()); 
    }
}
