/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package episodicv2;

import episodicv2.FutureCodelets.CA1;
import episodicv2.FutureCodelets.CA1Process3;
import episodicv2.FutureCodelets.CA3Process3;
import episodicv2.FutureCodelets.VLPFCProcess2;
import episodicv2.FutureCodelets.PRCProcess3;
import episodicv2.FutureCodelets.CA1Process1;
import episodicv2.FutureCodelets.ENC;
import episodicv2.FutureCodelets.MPFCProcess1;
import episodicv2.FutureCodelets.CA3Process1;
import episodicv2.FutureCodelets.PHCBridge;
import episodicv2.FutureCodelets.PCBridge;
import episodicv2.FutureCodelets.ITCProcess1;
import episodicv2.FutureCodelets.PRCBridge;
import episodicv2.FutureCodelets.TaskFrame;
import episodicv2.FutureCodelets.DLPFCPlanning;
import episodicv2.FutureCodelets.DGProcess;
import episodicv2.FutureCodelets.PRCStorageHandler;
import episodicv2.FutureCodelets.MPFC;
import episodicv2.FutureCodelets.CA3StorageHandler;
import episodicv2.FutureCodelets.DLPFC;
import episodicv2.FutureCodelets.VLPFCProcess1;
import episodicv2.FutureCodelets.DLPFCBaseController;
import episodicv2.FutureCodelets.CA1StorageHandler;
import episodicv2.FutureCodelets.CA3;
import episodicv2.FutureCodelets.DGBridge;
import episodicv2.FutureCodelets.ITCFeatures;
import episodicv2.FutureCodelets.PRCProcess2;
import episodicv2.FutureCodelets.VLPFC;
import episodicv2.FutureCodelets.CA3Process2;
import episodicv2.FutureCodelets.ITCBridge;
import episodicv2.Codelets.PPCCodelet;
import episodicv2.FutureCodelets.SB;
import episodicv2.FutureCodelets.CA1Process2;
import episodicv2.Codelets.ITCCodelet;
import episodicv2.FutureCodelets.PRCProcess1;
import episodicv2.Codelets.PHCProcess1;
import episodicv2.Codelets.ImageCodelet;
import episodicv2.Codelets.VisionCodelet;
import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.core.entities.Mind;
import br.unicamp.cst.io.rest.RESTServer;
import br.unicamp.cst.util.viewer.MindViewer;
import br.unicamp.cst.representation.idea.Idea;
import java.util.ArrayList; 
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public final class App {
    
    Mind m;
    
    private void createAndShowGUI(Mind m) {
        MindViewer mv = new MindViewer(m,"MindViewer",m.getCodeletGroupList("Motor"));
        mv.setVisible(true);
    } 
    
    public Mind prepareMind() {
        m = new Mind();
        
        //declare Ideas
        //TODO: review as categorias
        Idea imageReceivedPathIdea = new Idea("imageReceivedPathIdea","/yolo/files/simu.jpeg", "Property", 3);
        Idea centerPointsandClassesIdea = new Idea("centerPointsandClassesIdea", null,"Property",1);
        Idea recognizedObjectsSpikeIdea = new Idea("recognizedObjectsSpikeIdea", null,"Property",1);
        Idea centerPointsSpikeIdea = new Idea("centerPointsSpikeIdea",null,"Property",1);
        Idea unintegratedScenePatternIdea = new Idea("unintegratedScenePatternIdea",null,"Property",1);
        
        
//        Idea iTCSpikeIdea = new Idea("iTCSpikeIdea" );
//        recognizedObjectsSpikeIdea.add(iTCSpikeIdea);
        
//        Idea pid3 = new Idea("pid",null, "Property", 1);
//        Idea id2 = new Idea("id",null, "Property", 1);
//        Idea class2 = new Idea("class",null, "Property", 1);
//        Idea features2 = new Idea("features",null, "Property", 1);
//        Idea object3 = new Idea("object",null, "Property", 1);
//        ArrayList<Idea> objectsArray = new ArrayList<Idea>();
//        
//        object3.add(pid3);
//        object3.add(id2);
//        object3.add(class2);
//        object3.add(features2);
//        
//        objectsArray.add(object3);
//        
//        Idea objectsArrayIdea = new Idea("objectsArrayIdea", objectsArray);
//        iTCSpikeIdea.add(objectsArrayIdea);
//        
//        Idea currrentFrame3 = new Idea("currrentFrame",null, "Property", 1);
//        Idea time3 = new Idea("time",null, "Property", 1);
//        time3.add(currrentFrame3);
//        iTCSpikeIdea.add(time3);
        
        Idea requestObjectSpikeIdea = new Idea("requestObjectSpikeIdea");
        Idea objectId = new Idea("objectId",null, "Property", 1);
        Idea time4 = new Idea("time",null, "Property", 1);
        requestObjectSpikeIdea.add(objectId);
        requestObjectSpikeIdea.add(time4);
        
        Idea retrievedObjectTopDown = new Idea("retrievedObjectTopDown");
        Idea cObjectIdea = new Idea("cObjectIdea");
        Idea preId = new Idea("preId",null, "Property", 1);
        Idea classId = new Idea("classId",null, "Property", 1);
        Idea affect = new Idea("affect",null, "Property", 1);
        Idea x2 = new Idea("x",null, "Property", 1);
        Idea y2 = new Idea("y",null, "Property", 1);
        Idea label = new Idea("time",null, "Property", 1);
        Idea features3 = new Idea("time",null, "Property", 1);
        Idea time5 = new Idea("time",null, "Property", 1);
        Idea time6 = new Idea("time",null, "Property", 1);
        cObjectIdea.add(preId);
        cObjectIdea.add(classId);
        cObjectIdea.add(affect);
        cObjectIdea.add(x2);
        cObjectIdea.add(y2);
        cObjectIdea.add(label);
        cObjectIdea.add(features3);
        cObjectIdea.add(time5);
        retrievedObjectTopDown.add(cObjectIdea);
        retrievedObjectTopDown.add(time6);
        
        Idea pid4 = new Idea("pid",null, "Property", 1);
        Idea id3 = new Idea("id",null, "Property", 1);
        Idea class3 = new Idea("class",null, "Property", 1);
        Idea features4 = new Idea("features",null, "Property", 1);
        Idea object4 = new Idea("object",null, "Property", 1);
        object4.add(pid4);
        object4.add(id3);
        object4.add(class3);
        object4.add(features4);
        
        ArrayList<Idea> objectsArray1 =  new ArrayList<Idea>();
        objectsArray1.add(object4);
        Idea objectsArrayIdea2 = new Idea("objectsArrayIdea2", objectsArray1);
        
        Idea iTCFeaturesSpikeIdea = new Idea("iTCFeaturesSpikeIdea");
        iTCFeaturesSpikeIdea.add(objectsArrayIdea2);
        
        Idea currrentFrame4 = new Idea("currrentFrame",null, "Property", 1);
        Idea time7 = new Idea("time",null, "Property", 1);
        time7.add(currrentFrame4);
        iTCFeaturesSpikeIdea.add(time7);
        
        Idea objectRelation = new Idea("objectRelation");
        ArrayList<Idea> relationsArray = new ArrayList<Idea>();
        relationsArray.add(objectRelation);
        Idea relationsArrayIdea = new Idea("relationsArrayIdea", relationsArray);
        
        Idea objectId1_1 = new Idea("objectId1",null, "Property", 1);
        Idea objectId2_1 = new Idea("objectId2",null, "Property", 1);
        Idea activation = new Idea("activation",null, "Property", 1);
        Idea repetitions = new Idea("repetitions",null, "Property", 1);
        Idea time8 = new Idea("time",null, "Property", 1);
        Idea timestamp = new Idea("timestamp",null, "Property", 1);
        Idea recent = new Idea("recent",null, "Property", 1);
        Idea updated = new Idea("updated",null, "Property", 1);
        objectRelation.add(objectId1_1);
        objectRelation.add(objectId2_1);
        objectRelation.add(activation);
        objectRelation.add(repetitions);
        objectRelation.add(time8);
        objectRelation.add(timestamp);
        objectRelation.add(recent);
        objectRelation.add(updated);
        
        Idea midTermMemoryObjectRelationsIdea = new Idea("midTermMemoryObjectRelationsIdea");
        Idea objectRelation2 = new Idea("objectRelation");
        midTermMemoryObjectRelationsIdea.add(objectRelation);
        
        Idea objectId1_2 = new Idea("objectId1",null, "Property", 1);
        Idea objectId2_2 = new Idea("objectId2",null, "Property", 1);
        Idea activation2 = new Idea("activation",null, "Property", 1);
        Idea repetitions2 = new Idea("repetitions",null, "Property", 1);
        Idea time9 = new Idea("time",null, "Property", 1);
        Idea timestamp2 = new Idea("timestamp",null, "Property", 1);
        Idea recent2 = new Idea("recent",null, "Property", 1);
        Idea updated2 = new Idea("updated",null, "Property", 1);
        objectRelation2.add(objectId1_2);
        objectRelation2.add(objectId2_2);
        objectRelation2.add(activation2);
        objectRelation2.add(repetitions2);
        objectRelation2.add(time9);
        objectRelation2.add(timestamp2);
        objectRelation2.add(recent2);
        objectRelation2.add(updated2);
        
        Idea retrievedObjectRelationTopDownSpikeIdea = new Idea("retrievedObjectRelationTopDownSpikeIdea");
        Idea objectRelations = new Idea("objectRelations");
        retrievedObjectRelationTopDownSpikeIdea.add(objectRelations);
        
        Idea objectId2 = new Idea("objectId",null, "Property", 1);
        Idea repetitions3 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect = new Idea("negativeAffect",null, "Property", 1);
        Idea activation3 = new Idea("activation",null, "Property", 1);
        Idea time10 = new Idea("time",null, "Property", 1);
        Idea timestamp3 = new Idea("timestamp",null, "Property", 1);
        Idea integer = new Idea("integer",null, "Property", 1);
        ArrayList<Idea> relationsArray1 = new ArrayList<Idea>();
        relationsArray1.add(integer);
        Idea relationsArrayIdea1 = new Idea("relationsIdeaTest",relationsArray1, "Property", 1);
        objectRelations.add(relationsArrayIdea1);
        
        objectRelations.add(objectId2);
        objectRelations.add(repetitions3);
        objectRelations.add(positiveAffect);
        objectRelations.add(negativeAffect);
        objectRelations.add(activation3);
        objectRelations.add(time10);
        objectRelations.add(timestamp3);
        
        
        Idea objectRelationsSpikeIdea = new Idea("objectRelationsSpikeIdea");
        Idea objectRelations2 = new Idea("objectRelations");
        objectRelationsSpikeIdea.add(objectRelations2);
        
        Idea objectId3 = new Idea("objectId",null, "Property", 1);
        Idea repetitions4 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect2 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect2 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation4 = new Idea("activation",null, "Property", 1);
        Idea time11 = new Idea("time",null, "Property", 1);
        Idea timestamp4 = new Idea("timestamp",null, "Property", 1);
        Idea relations2 = new Idea("relations",null, "Property", 1);
        
        objectRelations.add(objectId3);
        objectRelations.add(repetitions4);
        objectRelations.add(positiveAffect2);
        objectRelations.add(negativeAffect2);
        objectRelations.add(activation4);
        objectRelations.add(time11);
        objectRelations.add(timestamp4);
        objectRelations.add(relations2);
        
        Idea newEncodedSceneSpikeIdea = new Idea("newEncodedSceneSpikeIdea");
        Idea scene = new Idea("scene");
        newEncodedSceneSpikeIdea.add(scene);
        Idea time12 = new Idea("time",null, "Property", 1);
        newEncodedSceneSpikeIdea.add(time12);
        
        Idea id4 = new Idea("objectId",null, "Property", 1);
        Idea pattern2 = new Idea("pattern2",null, "Property", 1);
        Idea time13 = new Idea("time",null, "Property", 1);
        Idea repetitions5 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect3 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect3 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation5 = new Idea("activation",null, "Property", 1);
        Idea timestamp5 = new Idea("timestamp",null, "Property", 1);
        Idea relations3 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent3 = new Idea("recent",null, "Property", 1);
        
        scene.add(id4);
        scene.add(pattern2);
        scene.add(time13);
        scene.add(repetitions5);
        scene.add(positiveAffect3);
        scene.add(negativeAffect3);
        scene.add(activation5);
        scene.add(timestamp5);
        scene.add(relations3);
        scene.add(activeSimilarity);
        scene.add(recent3);
        
        Idea midTermMemoyScenesIdea = new Idea("midTermMemoyScenesIdea");
        ArrayList<Idea> sceneArray = new ArrayList<Idea>();
        
        Idea sceneArrayIdea = new Idea("sceneArrayIdea", sceneArray);
        
        Idea scene2 = new Idea("scene");
        sceneArray.add(scene2);
        midTermMemoyScenesIdea.add(sceneArrayIdea);
        
        Idea id5 = new Idea("objectId",null, "Property", 1);
        Idea pattern3 = new Idea("pattern2",null, "Property", 1);
        Idea time14 = new Idea("time",null, "Property", 1);
        Idea repetitions6 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect4 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect4 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation6 = new Idea("activation",null, "Property", 1);
        Idea timestamp6 = new Idea("timestamp",null, "Property", 1);
        ArrayList<Idea> relationsArray2 = new ArrayList<Idea>();
        
        Idea sceneRelationIdea5 = new Idea("sceneRelation");
        Idea scene1Id4 = new Idea("scene1Id",null, "Property", 1);
        Idea scene2Id4 = new Idea("scene2Id",null, "Property", 1);
        Idea activation15 = new Idea("activation",null, "Property", 1);
        Idea repetitions16 = new Idea("repetitions",null, "Property", 1);
        Idea time28 = new Idea("time",null, "Property", 1);
        Idea timestamp15 = new Idea("timestamp",null, "Property", 1);
        Idea recent13 = new Idea("recent",null, "Property", 1);
        Idea updated6 = new Idea("recent",null, "Property", 1);
        
        sceneRelationIdea5.add(scene1Id4);
        sceneRelationIdea5.add(scene2Id4);
        sceneRelationIdea5.add(activation15);
        sceneRelationIdea5.add(repetitions16);
        sceneRelationIdea5.add(time28);
        sceneRelationIdea5.add(timestamp15);
        sceneRelationIdea5.add(recent13);
        sceneRelationIdea5.add(updated6);
       
        relationsArray2.add(sceneRelationIdea5);
        
        Idea relationsArrayIdea2 = new Idea("relations",relationsArray2, "Property", 1);
        Idea activeSimilarity2 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent4 = new Idea("recent",null, "Property", 1);
        
        scene2.add(id5);
        scene2.add(pattern3);
        scene2.add(time14);
        scene2.add(repetitions6);
        scene2.add(positiveAffect4);
        scene2.add(negativeAffect4);
        scene2.add(activation6);
        scene2.add(timestamp6);
        scene2.add(relationsArrayIdea2);
        scene2.add(activeSimilarity2);
        scene2.add(recent4);
        
        Map<Integer, Idea> midTermMemoryScenesByIDDGIdeaMap = new  ConcurrentHashMap<>();
                
        Idea midTermMemoryScenesByIDDGIdea = new Idea("midTermMemoryScenesByIDIdea", midTermMemoryScenesByIDDGIdeaMap);

        Idea scene3 = new Idea("scene");
        midTermMemoryScenesByIDDGIdea.add(scene3);
        
        Idea id6 = new Idea("objectId",null, "Property", 1);
        Idea pattern4 = new Idea("pattern2",null, "Property", 1);
        Idea time15 = new Idea("time",null, "Property", 1);
        Idea repetitions7 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect5 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect5 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation7 = new Idea("activation",null, "Property", 1);
        Idea timestamp7= new Idea("timestamp",null, "Property", 1);
        Idea relations5 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity3 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent5 = new Idea("recent",null, "Property", 1);
        
        scene3.add(id6);
        scene3.add(pattern4);
        scene3.add(time15);
        scene3.add(repetitions7);
        scene3.add(positiveAffect5);
        scene3.add(negativeAffect5);
        scene3.add(activation7);
        scene3.add(timestamp7);
        scene3.add(relations5);
        scene3.add(activeSimilarity3);
        scene3.add(recent5);
        
        Map<Integer, Idea> midTermMemoryScenesByIDCA3IdeaMap = new  ConcurrentHashMap<>();        
        Idea midTermMemoryScenesByIDCA3Idea = new Idea("midTermMemoryScenesByIDIdea", midTermMemoryScenesByIDCA3IdeaMap);

        Idea scene4 = new Idea("scene");
        midTermMemoryScenesByIDCA3Idea.add(scene4);
        
        Idea id7 = new Idea("objectId",null, "Property", 1);
        Idea pattern5 = new Idea("pattern2",null, "Property", 1);
        Idea time16 = new Idea("time",null, "Property", 1);
        Idea repetitions8 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect6 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect6 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation8 = new Idea("activation",null, "Property", 1);
        Idea timestamp8= new Idea("timestamp",null, "Property", 1);
        Idea relations6 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity4 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent6 = new Idea("recent",null, "Property", 1);
        
        scene4.add(id7);
        scene4.add(pattern5);
        scene4.add(time16);
        scene4.add(repetitions8);
        scene4.add(positiveAffect6);
        scene4.add(negativeAffect6);
        scene4.add(activation8);
        scene4.add(timestamp8);
        scene4.add(relations6);
        scene4.add(activeSimilarity4);
        scene4.add(recent6);
        
        Idea currentSceneSpikeIdea = new Idea("currentSceneSpikeIdea");
        
        Idea time17 = new Idea("time");
        currentSceneSpikeIdea.add(time17);
        
        Idea scene5 = new Idea("scene");
        currentSceneSpikeIdea.add(scene5);
        
        Idea id8 = new Idea("objectId",null, "Property", 1);
        Idea pattern6 = new Idea("pattern2",null, "Property", 1);
        Idea time18 = new Idea("time",null, "Property", 1);
        Idea repetitions9 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect7 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect7 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation9 = new Idea("activation",null, "Property", 1);
        Idea timestamp9 = new Idea("timestamp",null, "Property", 1);
        Idea relations7 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity5 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent7 = new Idea("recent",null, "Property", 1);
        
        scene5.add(id8);
        scene5.add(pattern6);
        scene5.add(time18);
        scene5.add(repetitions9);
        scene5.add(positiveAffect7);
        scene5.add(negativeAffect7);
        scene5.add(activation9);
        scene5.add(timestamp9);
        scene5.add(relations7);
        scene5.add(activeSimilarity5);
        scene5.add(recent7);
        
        Idea similarScenesSpikeIdea = new Idea("similarScenesSpikeIdea");
        
        Idea time30 = new Idea("time");
        similarScenesSpikeIdea.add(time30);
        
        Idea scene8 = new Idea("scene");
        ArrayList<Idea> similarScenesArray = new ArrayList<Idea>();
        similarScenesArray.add(scene8);
        Idea similarScenesArrayIdea = new Idea("similarScenesArrayIdea", similarScenesArray);
        
        similarScenesSpikeIdea.add(similarScenesArrayIdea);
        
        Idea id11 = new Idea("objectId",null, "Property", 1);
        Idea pattern9 = new Idea("pattern2",null, "Property", 1);
        Idea time31 = new Idea("time",null, "Property", 1);
        Idea repetitions17 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect10 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect10 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation16 = new Idea("activation",null, "Property", 1);
        Idea timestamp16 = new Idea("timestamp",null, "Property", 1);
        Idea relations10 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity8 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent14 = new Idea("recent",null, "Property", 1);
        
        scene8.add(id11);
        scene8.add(pattern9);
        scene8.add(time31);
        scene8.add(repetitions17);
        scene8.add(positiveAffect10);
        scene8.add(negativeAffect10);
        scene8.add(activation16);
        scene8.add(timestamp16);
        scene8.add(relations10);
        scene8.add(activeSimilarity8);
        scene8.add(recent14);
        
        Idea requestSceneByIDSpikeIdea = new Idea("resquestSceneByIDSpikeIdea");
        Idea integer3 = new Idea("integer");
        requestSceneByIDSpikeIdea.add(integer3);
        
        Idea time19 = new Idea("time");
        requestSceneByIDSpikeIdea.add(time19);
        
        Idea requestSimilarScenesSpikeIdea = new Idea("requestSimilarScenesSpikeIdea");
        
        Idea time20 = new Idea("time");
        requestSimilarScenesSpikeIdea.add(time20);
        
        Idea scene6 = new Idea("scene");
        requestSimilarScenesSpikeIdea.add(scene6);
        
        Idea id9 = new Idea("objectId",0, "Property", 1);
        Idea pattern7 = new Idea("pattern2",null, "Property", 1);
        Idea time21 = new Idea("time",0, "Property", 1);
        Idea repetitions10 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect8 = new Idea("positiveAffect",0, "Property", 1);
        Idea negativeAffect8 = new Idea("negativeAffect",0, "Property", 1);
        Idea activation10 = new Idea("activation",0.5, "Property", 1);
        Idea timestamp10 = new Idea("timestamp",null, "Property", 1);
        Idea relations8 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity6 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent8 = new Idea("recent",null, "Property", 1);
        
        scene6.add(id9);
        scene6.add(pattern7);
        scene6.add(time21);
        scene6.add(repetitions10);
        scene6.add(positiveAffect8);
        scene6.add(negativeAffect8);
        scene6.add(activation10);
        scene6.add(timestamp10);
        scene6.add(relations8);
        scene6.add(activeSimilarity6);
        scene6.add(recent8);
    
        
        Idea retrievedSceneTopDownSpikeIdea = new Idea("retrievedSceneTopDownSpikeIdea");
        
        Idea time22 = new Idea("time");
        retrievedSceneTopDownSpikeIdea.add(time22);
        
        Idea scene7 = new Idea("scene");
        
        ArrayList<Idea> similarScenesArray2 = new ArrayList<>();
        Idea similarScenesArrayIdea2 = new Idea("similarScenesArrayIdea", similarScenesArray2);
        similarScenesArrayIdea2.add(scene7);
        retrievedSceneTopDownSpikeIdea.add(similarScenesArrayIdea2);
        
        Idea id10 = new Idea("objectId",null, "Property", 1);
        Idea pattern8 = new Idea("pattern2",null, "Property", 1);
        Idea time23 = new Idea("time",null, "Property", 1);
        Idea repetitions11 = new Idea("repetitions",null, "Property", 1);
        Idea positiveAffect9 = new Idea("positiveAffect",null, "Property", 1);
        Idea negativeAffect9 = new Idea("negativeAffect",null, "Property", 1);
        Idea activation11 = new Idea("activation",null, "Property", 1);
        Idea timestamp11 = new Idea("timestamp",null, "Property", 1);
        Idea relations9 = new Idea("relations",null, "Property", 1);
        Idea activeSimilarity7 = new Idea("activeSimilarity",null, "Property", 1);
        Idea recent9 = new Idea("recent",null, "Property", 1);
        
        scene7.add(id10);
        scene7.add(pattern8);
        scene7.add(time23);
        scene7.add(repetitions11);
        scene7.add(positiveAffect9);
        scene7.add(negativeAffect9);
        scene7.add(activation11);
        scene7.add(timestamp11);
        scene7.add(relations9);
        scene7.add(activeSimilarity7);
        scene7.add(recent9);
        
        Idea sceneRelationIdea = new Idea("sceneRelationIdea");
        
        Idea scene1Id = new Idea("scene1Id",null, "Property", 1);
        Idea scene2Id = new Idea("scene2Id",null, "Property", 1);
        Idea activation12 = new Idea("activation",null, "Property", 1);
        Idea repetitions12 = new Idea("repetitions",null, "Property", 1);
        Idea time24 = new Idea("time",null, "Property", 1);
        Idea timestamp12 = new Idea("timestamp",null, "Property", 1);
        Idea recent10 = new Idea("recent",null, "Property", 1);
        Idea updated3 = new Idea("recent",null, "Property", 1);
        
        sceneRelationIdea.add(scene1Id);
        sceneRelationIdea.add(scene2Id);
        sceneRelationIdea.add(activation12);
        sceneRelationIdea.add(repetitions12);
        sceneRelationIdea.add(time24);
        sceneRelationIdea.add(timestamp12);
        sceneRelationIdea.add(recent10);
        sceneRelationIdea.add(updated3);
        
        Map<Integer, ConcurrentHashMap<Integer, Idea>> midTermMemorySceneRelationsCA1IdeaMap = new ConcurrentHashMap<>();
        
        
        Idea midTermMemorySceneRelationsCA1Idea = new Idea("midTermMemorySceneRelationsCA1Idea", midTermMemorySceneRelationsCA1IdeaMap);
                
        Idea sceneRelationIdea2 = new Idea("sceneRelation");
        midTermMemorySceneRelationsCA1Idea.add(sceneRelationIdea2);
        
        Idea scene1Id2 = new Idea("scene1Id",null, "Property", 1);
        Idea scene2Id2 = new Idea("scene2Id",null, "Property", 1);
        Idea activation13 = new Idea("activation",null, "Property", 1);
        Idea repetitions13 = new Idea("repetitions",null, "Property", 1);
        Idea time25 = new Idea("time",null, "Property", 1);
        Idea timestamp13 = new Idea("timestamp",null, "Property", 1);
        Idea recent11 = new Idea("recent",null, "Property", 1);
        Idea updated4 = new Idea("recent",null, "Property", 1);
        
        sceneRelationIdea2.add(scene1Id2);
        sceneRelationIdea2.add(scene2Id2);
        sceneRelationIdea2.add(activation13);
        sceneRelationIdea2.add(repetitions13);
        sceneRelationIdea2.add(time25);
        sceneRelationIdea2.add(timestamp13);
        sceneRelationIdea2.add(recent11);
        sceneRelationIdea2.add(updated4);
        
        Idea sceneRelationsSpikeIdea = new Idea("sceneRelationsSpikeIdea");
        
        Idea time26 = new Idea("integer");
        sceneRelationsSpikeIdea.add(time26);
        
        ArrayList<Idea> sceneRelationsArray3 = new ArrayList<Idea>();
        Idea sceneRelationIdea3 = new Idea("sceneRelation");
        sceneRelationsArray3.add(sceneRelationIdea3);
        
        Idea sceneRelationsArrayIdea = new Idea("sceneRelationsArrayIdea", sceneRelationsArray3);
        sceneRelationsSpikeIdea.add(sceneRelationsArrayIdea);
        
        Idea scene1Id3 = new Idea("scene1Id",null, "Property", 1);
        Idea scene2Id3 = new Idea("scene2Id",null, "Property", 1);
        Idea activation14 = new Idea("activation",null, "Property", 1);
        Idea repetitions14 = new Idea("repetitions",null, "Property", 1);
        Idea time27 = new Idea("time",null, "Property", 1);
        Idea timestamp14 = new Idea("timestamp",null, "Property", 1);
        Idea recent12 = new Idea("recent",null, "Property", 1);
        Idea updated5 = new Idea("recent",null, "Property", 1);
        
        sceneRelationIdea3.add(scene1Id3);
        sceneRelationIdea3.add(scene2Id3);
        sceneRelationIdea3.add(activation14);
        sceneRelationIdea3.add(repetitions14);
        sceneRelationIdea3.add(time27);
        sceneRelationIdea3.add(timestamp14);
        sceneRelationIdea3.add(recent12);
        sceneRelationIdea3.add(updated5);
        
        Idea retrievedSceneTopDownLTM = new Idea("retrievedSceneTopDownLTM");
        
        Idea time29 = new Idea("integer");
        retrievedSceneTopDownLTM.add(time29);
        
        Idea sceneRelationsIdea2 = new Idea("sceneRelations");
        Idea sceneRelationIdea4 = new Idea("sceneRelation");
        sceneRelationsIdea2.add(sceneRelationIdea4);
        retrievedSceneTopDownLTM.add(sceneRelationsIdea2);
        
        Idea scene1Id5 = new Idea("scene1Id",null, "Property", 1);
        Idea scene2Id5 = new Idea("scene2Id",null, "Property", 1);
        Idea activation17 = new Idea("activation",null, "Property", 1);
        Idea repetitions15 = new Idea("repetitions",null, "Property", 1);
        Idea time32 = new Idea("time",null, "Property", 1);
        Idea timestamp17 = new Idea("timestamp",null, "Property", 1);
        Idea recent15 = new Idea("recent",null, "Property", 1);
        Idea updated7 = new Idea("recent",null, "Property", 1);
        
        sceneRelationIdea4.add(scene1Id5);
        sceneRelationIdea4.add(scene2Id5);
        sceneRelationIdea4.add(activation17);
        sceneRelationIdea4.add(repetitions15);
        sceneRelationIdea4.add(time32);
        sceneRelationIdea4.add(timestamp17);
        sceneRelationIdea4.add(recent15);
        sceneRelationIdea4.add(updated7);
        
        Idea taskSetSpikeIdea = new Idea("taskSetSpikeIdea");
        Idea allowBottom = new Idea("ALLOW_BUTTON_UP",1, "Property", 3);
        Idea allowTop = new Idea("ALLOW_BUTTON_UP",2, "Property", 3);
        Idea allowedProcessingFlow = new Idea("allowedProcessingFlow",0, "Property", 3);
        Idea allowedScenePattern = new Idea("allowedScenePattern","", "Property", 3);
        Idea allowedObjectRelation = new Idea("allowedObjectRelation",0, "Property", 3);
        taskSetSpikeIdea.add(allowBottom);
        taskSetSpikeIdea.add(allowTop);
        taskSetSpikeIdea.add(allowedProcessingFlow);
        taskSetSpikeIdea.add(allowedScenePattern);
        taskSetSpikeIdea.add(allowedObjectRelation);
        
        
        Idea root = new Idea("root");
        
        root.add(requestObjectSpikeIdea);
        root.add(retrievedObjectRelationTopDownSpikeIdea);
        root.add(iTCFeaturesSpikeIdea);
        root.add(relationsArrayIdea);
        root.add(midTermMemoryObjectRelationsIdea);
        root.add(retrievedObjectRelationTopDownSpikeIdea);
        root.add(objectRelationsSpikeIdea);
        root.add(newEncodedSceneSpikeIdea);
        root.add(midTermMemoyScenesIdea);
        root.add(midTermMemoryScenesByIDCA3Idea);
        root.add(midTermMemoryScenesByIDDGIdea);
        root.add(currentSceneSpikeIdea);
        root.add(similarScenesSpikeIdea);
        root.add(requestSceneByIDSpikeIdea);
        root.add(requestSimilarScenesSpikeIdea);
        root.add(retrievedSceneTopDownSpikeIdea);
        root.add(sceneRelationIdea);
        root.add(midTermMemorySceneRelationsCA1Idea);
        root.add(sceneRelationsSpikeIdea);
        root.add(retrievedSceneTopDownLTM);
        root.add(taskSetSpikeIdea);
        
        MemoryObject mo;
        mo = m.createMemoryObject("rootMO");
        mo.setI(root);
        
        MemoryObject imageReceivedPathMO;
        imageReceivedPathMO = m.createMemoryObject("imageReceivedPathMO");
        imageReceivedPathMO.setI(imageReceivedPathIdea);
        
        MemoryObject centerPointsandClassesMO;
        centerPointsandClassesMO = m.createMemoryObject("centerPointsandClassesMO");
        centerPointsandClassesMO.setI(centerPointsandClassesIdea);
        
        MemoryObject centerPointsSpikeMO;
        centerPointsSpikeMO = m.createMemoryObject("centerPointsSpikeMO");
        centerPointsSpikeMO.setI(centerPointsSpikeIdea);
        
        MemoryObject unintegratedScenePatternMO;
        unintegratedScenePatternMO = m.createMemoryObject("unintegratedScenePatternMO");
        unintegratedScenePatternMO.setI(unintegratedScenePatternIdea);
        
        MemoryObject recognizedObjectsSpikeMO;
        recognizedObjectsSpikeMO = m.createMemoryObject("recognizedObjectsSpikeMO");
        recognizedObjectsSpikeMO.setI(recognizedObjectsSpikeIdea);
        
        //Create Sensor Codelets
        ImageCodelet imageCodelet = new ImageCodelet();
        imageCodelet.setName("IMAGE");
        imageCodelet.addOutput(imageReceivedPathMO);
        m.insertCodelet(imageCodelet, "VISION_Cs");
        
        //Gets the image and returns objects points and classes
        VisionCodelet vision = new VisionCodelet();
        vision.setName("VISION");
        vision.addInput(imageReceivedPathMO);
        vision.addOutput(centerPointsandClassesMO);
        m.insertCodelet(vision, "VISION_Cs");
        
        PPCCodelet ppcCodelet = new PPCCodelet();
        ppcCodelet.setName("PPC");
        ppcCodelet.addInput(centerPointsandClassesMO);
        ppcCodelet.addOutput(centerPointsSpikeMO);
        m.insertCodelet(ppcCodelet, "DORSAL_Cs");
        
        PHCProcess1 pHCProcess1 = new PHCProcess1();
        pHCProcess1.setName("PHC_PROCESS_1");
        pHCProcess1.addInput(centerPointsSpikeMO);
        pHCProcess1.addOutput(unintegratedScenePatternMO);
        m.insertCodelet(pHCProcess1, "DORSAL_Cs");
        
        
        ITCCodelet iTCCodelet = new ITCCodelet();
        iTCCodelet.setName("ITC");
        iTCCodelet.addInput(centerPointsandClassesMO);
        iTCCodelet.addOutput(recognizedObjectsSpikeMO);
        m.insertCodelet(iTCCodelet, "VENTRAL_Cs");
        
        
        Codelet taskFrame=new TaskFrame();
        taskFrame.setName("TASK_NAME");
        m.insertCodelet(taskFrame, "VISION_Cs");
        
        Codelet pC=new PPCCodelet();
        pC.setName("PC");
        m.insertCodelet(pC, "DORSAL_Cs");
        
        Codelet pCBridge=new PCBridge();
        pCBridge.setName("PC_BRIDGE");
        m.insertCodelet(pCBridge, "DORSAL_Cs");
        
        
        Codelet iTCFeatures=new ITCFeatures();
        iTCFeatures.setName("ITC_FEATURES");
        m.insertCodelet(iTCFeatures, "VENTRAL_Cs");
        
        Codelet iTCBridge=new ITCBridge();
        iTCBridge.setName("ITC_BRIDGE");
        m.insertCodelet(iTCBridge, "VENTRAL_Cs");
        
        Codelet iTCProcess1=new ITCProcess1();
        iTCProcess1.setName("ITC_PROCESS_1");
        m.insertCodelet(iTCProcess1, "VENTRAL_Cs");
        
        Codelet pHCBridge=new PHCBridge();
        pHCBridge.setName("PHC_BRIDGE");
        m.insertCodelet(pHCBridge, "DORSAL_Cs");
        
    
        
        Codelet pRCBridge=new PRCBridge();
        pRCBridge.setName("PRC_BRIDGE");
        m.insertCodelet(pRCBridge, "VENTRAL_Cs");
        
        Codelet pRCProcess1=new PRCProcess1();
        pRCProcess1.setName("PRC_PROCESS_1");
        m.insertCodelet(pRCProcess1, "VENTRAL_Cs");
        
        Codelet pRCProcess2=new PRCProcess2();
        pRCProcess2.setName("PRC_PROCESS_2");
        m.insertCodelet(pRCProcess2, "VENTRAL_Cs");
        
        Codelet pRCProcess3=new PRCProcess3();
        pRCProcess3.setName("PRC_PROCESS_3");
        m.insertCodelet(pRCProcess3, "VENTRAL_Cs");
        
        Codelet pRCStorageHandler=new PRCStorageHandler();
        pRCStorageHandler.setName("PRC_STORAGE_HANDLER");
        m.insertCodelet(pRCStorageHandler, "VENTRAL_Cs");
        
        Codelet eNC=new ENC();
        eNC.setName("ENC");
        m.insertCodelet(eNC, "ENC_Cs");
        
        Codelet cA3=new CA3();
        cA3.setName("CA3");
        m.insertCodelet(cA3, "CA3_Cs");
        
        Codelet cA3Process1=new CA3Process1();
        cA3Process1.setName("CA3_PROCESS_1");
        m.insertCodelet(cA3Process1, "CA3_Cs");
        
        Codelet cA3Process2=new CA3Process2();
        cA3Process2.setName("CA3_PROCESS_2");
        m.insertCodelet(cA3Process2, "CA3_Cs");
        
        Codelet cA3Process3=new CA3Process3();
        cA3Process3.setName("CA3_PROCESS_3");
        m.insertCodelet(cA3Process3, "CA3_Cs");
        
        Codelet cA3StorageHandler=new CA3StorageHandler();
        cA3StorageHandler.setName("CA3_STORAGE_HANDLER");
        m.insertCodelet(cA3StorageHandler, "CA3_Cs");
        
        Codelet cA1=new CA1();
        cA1.setName("CA1");
        m.insertCodelet(cA1, "CA1_Cs");
        
        Codelet cA1Process1=new CA1Process1();
        cA1Process1.setName("CA1_PROCESS_1");
        m.insertCodelet(cA1Process1, "CA1_Cs");
        
        Codelet cA1Process2=new CA1Process2();
        cA1Process2.setName("CA1_PROCESS_2");
        m.insertCodelet(cA1Process2, "CA1_Cs");
        
        Codelet cA1Process3=new CA1Process3();
        cA1Process3.setName("CA1_PROCESS_3");
        m.insertCodelet(cA1Process3, "CA1_Cs");
        
        Codelet cA1StorageHandler=new CA1StorageHandler();
        cA1StorageHandler.setName("CA1_STORAGE_HANDLER");
        m.insertCodelet(cA1StorageHandler, "CA1_Cs");
        
        Codelet dGBridge=new DGBridge();
        dGBridge.setName("DG_BRIDGE");
        m.insertCodelet(dGBridge, "DG_Cs");
        
        Codelet dGProcess=new DGProcess();
        dGProcess.setName("DG_PROCESS");
        m.insertCodelet(dGProcess, "DG_Cs");
        
        Codelet mPFC=new MPFC();
        mPFC.setName("MPFC");
        m.insertCodelet(mPFC, "PFC_Cs");
        
        Codelet mPFCProcess1=new MPFCProcess1();
        mPFCProcess1.setName("MPFC_PROCESS_1");
        m.insertCodelet(mPFCProcess1, "PFC_Cs");
        
        Codelet dLPFC=new DLPFC();
        dLPFC.setName("DLPFC");
        m.insertCodelet(dLPFC, "PFC_Cs");
        
        Codelet dLPFCPlanning1=new DLPFCPlanning();
        dLPFCPlanning1.setName("DLPFC_PLANNING");
        m.insertCodelet(dLPFCPlanning1, "PFC_Cs");
        
        Codelet dLPFCBaseController=new DLPFCBaseController();
        dLPFCBaseController.setName("DLPFC_PLANNING");
        m.insertCodelet(dLPFCBaseController, "PFC_Cs");
        
        Codelet vLPFC=new VLPFC();
        vLPFC.setName("VLPFC");
        m.insertCodelet(vLPFC, "PFC_Cs");
        
        Codelet vLPFCProcess1=new VLPFCProcess1();
        vLPFCProcess1.setName("VLPFC_PROCESS_1");
        m.insertCodelet(vLPFCProcess1, "PFC_Cs");
        
        Codelet vLPFCProcess2=new VLPFCProcess2();
        vLPFCProcess2.setName("VLPFC_PROCESS_2");
        m.insertCodelet(vLPFCProcess2, "PFC_Cs");
        
        Codelet sB=new SB();
        sB.setName("SB");
        m.insertCodelet(sB, "SB_Cs");
       
        m.start();
        
        return(m);
    }
    
    public App() {
        Mind m = prepareMind();
        // The next line can be commented if you don't want the Desktop MindViewer
        createAndShowGUI(m);
        // The next line can be commented if you don't use the MindViewer Web
        RESTServer rs = new RESTServer(m,5001,true);
        
        
    }
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        
    }
}
