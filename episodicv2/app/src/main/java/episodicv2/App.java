/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package episodicv2;

import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.core.entities.Mind;
import br.unicamp.cst.io.rest.RESTServer;
import br.unicamp.cst.util.viewer.MindViewer;
import br.unicamp.cst.representation.idea.Idea;

public final class App {
    
    Mind m;
    
    private void createAndShowGUI(Mind m) {
        MindViewer mv = new MindViewer(m,"MindViewer",m.getCodeletGroupList("Motor"));
        mv.setVisible(true);
    } 
    
    public Mind prepareMind() {
        m = new Mind();
        
        //declare Ideas
        //TODO: review as categorias
        
        Idea x = new Idea("x",null, "Property", 1);
        Idea y = new Idea("y",null, "Property", 1);
        Idea pid1 = new Idea("pid",0, "Property", 1);
        Idea object1 = new Idea("object",null, "Property", 1);
        object1.add(x);
        object1.add(y);
        object1.add(pid1);      
        
        Idea currrentFrame1 = new Idea("currrentFrame",null, "Property", 1);
        Idea time1 = new Idea("time",null, "Property", 1);
        time1.add(currrentFrame1);
        
        Idea ppcIdea = new Idea("ppc","","Property",1);
        ppcIdea.add(object1);
        ppcIdea.add(time1);
        
        Idea centerPointsSpikeIdea = new Idea("centerPointsSpikeIdea","","Property",1);
        centerPointsSpikeIdea.add(ppcIdea);
        
        
        Idea pid2 = new Idea("pid",null, "Property", 1);
        Idea id1 = new Idea("id",null, "Property", 1);
        Idea class1 = new Idea("class",null, "Property", 1);
        Idea features1 = new Idea("features",null, "Property", 1);
        Idea object2 = new Idea("object",null, "Property", 1);
        object2.add(pid2);
        object2.add(id1);
        object2.add(class1);
        object2.add(features1);
        
        //TODO: isso poderia ser law? já que não muda!
        Idea imageWidth1 = new Idea("imageWidth",640, "Property", 1);
        Idea imageHeight1 = new Idea("imageHeight",480, "Property", 1);
        Idea gridColumnsX1 = new Idea("gridColumns",10, "Property", 1);
        Idea gridRowsY1 = new Idea("gridRows",7, "Property", 1);
        
        Idea occupancyGrid = new Idea("occupancyGrid");
        occupancyGrid.add(object2);
        occupancyGrid.add(imageWidth1);
        occupancyGrid.add(imageHeight1);
        occupancyGrid.add(gridColumnsX1);
        occupancyGrid.add(gridRowsY1);
        
        Idea imageWidth2 = new Idea("imageWidth",640, "Property", 1);
        Idea imageHeight2 = new Idea("imageHeight",480, "Property", 1);
        Idea gridColumnsX2 = new Idea("gridColumns",10, "Property", 1);
        Idea gridRowsY2 = new Idea("gridRows",7, "Property", 1);
        
        
        Idea pattern = new Idea("pattern");
        pattern.add(occupancyGrid);
        pattern.add(imageWidth2);
        pattern.add(imageHeight2);
        pattern.add(gridColumnsX2);
        pattern.add(gridRowsY2);
        
        
        Idea unintegratedScenePatternIdea = new Idea("unintegratedScenePatternIdea");
        unintegratedScenePatternIdea.add(pattern);
        
        Idea currrentFrame2 = new Idea("currrentFrame",null, "Property", 1);
        Idea time2 = new Idea("time",null, "Property", 1);
        time2.add(currrentFrame2);
        unintegratedScenePatternIdea.add(time2);
        
//        
//        Idea preId = new Idea("preID","", "Property", 1 );
//        Idea classId = new Idea("classId","", "Property", 1 );
//        Idea affect = new Idea("affect","", "Property", 1 );
//        Idea time = new Idea("time","", "Property", 1 );
//        Idea label = new Idea("label","", "Property", 1 );
//        Idea features2 = new Idea("preID","", "Property", 1 );
//        
//        Idea CObjectITCIdea = new Idea("CObjectITCIdea");
//        CObjectITCIdea.add(preId);
//        CObjectITCIdea.add(classId);
//        CObjectITCIdea.add(affect);
//        CObjectITCIdea.add(x);
//        CObjectITCIdea.add(y);
//        CObjectITCIdea.add(time);
//        CObjectITCIdea.add(label);
//        CObjectITCIdea.add(features2);
//        
//        Idea recognizedObjectsIdea = new Idea("recognizedObjectsIdea");
//        recognizedObjectsIdea.add(CObjectITCIdea);
//        
//        Idea id = new Idea("id","", "Property", 1 );
//        Idea classIdea = new Idea("classIdea","", "Property", 1 );
//        
//        Idea sceneObjectITCIdea = new Idea("sceneObjectITCIdea");
//        sceneObjectITCIdea.add(pid);
//        sceneObjectITCIdea.add(id);
//        sceneObjectITCIdea.add(classIdea);
//        sceneObjectITCIdea.add(features);
//        
//        
//        Idea object1Id = new Idea("object1Id","", "Property", 1 );
//        Idea object2Id = new Idea("object2Id","", "Property", 1 );
//        Idea activation = new Idea("activation","", "Property", 1 );
//        Idea repetitions = new Idea("repetitions","", "Property", 1 );
////        Idea time = new Idea("object1Id","", "Property", 1 );
//        Idea timestamp = new Idea("timestamp","", "Property", 1 );
//        Idea recent = new Idea("recent",true, "Property", 1 );
//        Idea updated = new Idea("updated",false, "Property", 1 );
//        
//        Idea objectRelationIdea = new Idea("objectRelationIdea");
//        objectRelationIdea.add((object1Id));
//        objectRelationIdea.add(object2Id);
//        objectRelationIdea.add(activation);
//        objectRelationIdea.add(repetitions);
//        objectRelationIdea.add(time);
//        objectRelationIdea.add(timestamp);
//        objectRelationIdea.add(recent);
//        objectRelationIdea.add(updated);
//        
//        
////        Idea pattern = new Idea("pattern","", "Property", 1 );
////        Idea time = new Idea("time","", "Property", 1 );
////        Idea repetitions = new Idea("repetitions","", "Property", 1 );
//        Idea positiveAffect = new Idea("positiveAffect","", "Property", 1 );
//        Idea negativeAffect = new Idea("negativeAffect","", "Property", 1 );
//        Idea relations = new Idea("relations","", "Property", 1 );
//        Idea activeSimilarity = new Idea("activeSimilarity","", "Property", 1 );
//
//        Idea sceneIdea = new Idea("sceneIdea");
//        sceneIdea.add(id);
//        sceneIdea.add(pattern);
//        sceneIdea.add(time);
//        sceneIdea.add(repetitions);
//        sceneIdea.add(positiveAffect);
//        sceneIdea.add(negativeAffect);
//        sceneIdea.add(activation);
//        sceneIdea.add(timestamp);
//        sceneIdea.add(relations);
//        sceneIdea.add(activeSimilarity);
//        sceneIdea.add(recent);
//        idea.add(new Idea("idea1",0.1D,"Property",1));
        
    
        
        
        
        //Declare Memory Objects

        
        //Create Sensor Codelets
        Codelet vision=new Vision();
        vision.setName("VISION");
        m.insertCodelet(vision, "VISION_Cs");
        
        Codelet taskFrame=new TaskFrame();
        taskFrame.setName("TASK_NAME");
        m.insertCodelet(taskFrame, "VISION_Cs");
        
        Codelet pC=new PC();
        pC.setName("PC");
        m.insertCodelet(pC, "DORSAL_Cs");
        
        Codelet pCBridge=new PCBridge();
        pCBridge.setName("PC_BRIDGE");
        m.insertCodelet(pCBridge, "DORSAL_Cs");
        
        Codelet iTCObject=new ITCObject();
        iTCObject.setName("ITC_OBJECT");
        m.insertCodelet(iTCObject, "VENTRAL_Cs");
        
        Codelet iTCFeatures=new ITCFeatures();
        iTCFeatures.setName("ITC_FEATURES");
        m.insertCodelet(iTCFeatures, "VENTRAL_Cs");
        
        Codelet iTCBridge=new ITCBridge();
        iTCBridge.setName("ITC_BRIDGE");
        m.insertCodelet(iTCBridge, "VENTRAL_Cs");
        
        Codelet iTCProcess1=new ITCProcess1();
        iTCProcess1.setName("ITC_PROCESS_1");
        m.insertCodelet(iTCProcess1, "VENTRAL_Cs");
        
        Codelet pHCBridge=new PHCBridge();
        pHCBridge.setName("PHC_BRIDGE");
        m.insertCodelet(pHCBridge, "DORSAL_Cs");
        
        Codelet pHCProcess1=new PHCProcess1();
        pHCProcess1.setName("PHC_PROCESS_1");
        m.insertCodelet(pHCProcess1, "DORSAL_Cs");
        
        Codelet pRCBridge=new PRCBridge();
        pRCBridge.setName("PRC_BRIDGE");
        m.insertCodelet(pRCBridge, "VENTRAL_Cs");
        
        Codelet pRCProcess1=new PRCProcess1();
        pRCProcess1.setName("PRC_PROCESS_1");
        m.insertCodelet(pRCProcess1, "VENTRAL_Cs");
        
        Codelet pRCProcess2=new PRCProcess2();
        pRCProcess2.setName("PRC_PROCESS_2");
        m.insertCodelet(pRCProcess2, "VENTRAL_Cs");
        
        Codelet pRCProcess3=new PRCProcess3();
        pRCProcess3.setName("PRC_PROCESS_3");
        m.insertCodelet(pRCProcess3, "VENTRAL_Cs");
        
        Codelet pRCStorageHandler=new PRCStorageHandler();
        pRCStorageHandler.setName("PRC_STORAGE_HANDLER");
        m.insertCodelet(pRCStorageHandler, "VENTRAL_Cs");
        
        Codelet eNC=new ENC();
        eNC.setName("ENC");
        m.insertCodelet(eNC, "ENC_Cs");
        
        Codelet cA3=new CA3();
        cA3.setName("CA3");
        m.insertCodelet(cA3, "CA3_Cs");
        
        Codelet cA3Process1=new CA3Process1();
        cA3Process1.setName("CA3_PROCESS_1");
        m.insertCodelet(cA3Process1, "CA3_Cs");
        
        Codelet cA3Process2=new CA3Process2();
        cA3Process2.setName("CA3_PROCESS_2");
        m.insertCodelet(cA3Process2, "CA3_Cs");
        
        Codelet cA3Process3=new CA3Process3();
        cA3Process3.setName("CA3_PROCESS_3");
        m.insertCodelet(cA3Process3, "CA3_Cs");
        
        Codelet cA3StorageHandler=new CA3StorageHandler();
        cA3StorageHandler.setName("CA3_STORAGE_HANDLER");
        m.insertCodelet(cA3StorageHandler, "CA3_Cs");
        
        Codelet cA1=new CA1();
        cA1.setName("CA1");
        m.insertCodelet(cA1, "CA1_Cs");
        
        Codelet cA1Process1=new CA1Process1();
        cA1Process1.setName("CA1_PROCESS_1");
        m.insertCodelet(cA1Process1, "CA1_Cs");
        
        Codelet cA1Process2=new CA1Process2();
        cA1Process2.setName("CA1_PROCESS_2");
        m.insertCodelet(cA1Process2, "CA1_Cs");
        
        Codelet cA1Process3=new CA1Process3();
        cA1Process3.setName("CA1_PROCESS_3");
        m.insertCodelet(cA1Process3, "CA1_Cs");
        
        Codelet cA1StorageHandler=new CA1StorageHandler();
        cA1StorageHandler.setName("CA1_STORAGE_HANDLER");
        m.insertCodelet(cA1StorageHandler, "CA1_Cs");
        
        Codelet dGBridge=new DGBridge();
        dGBridge.setName("DG_BRIDGE");
        m.insertCodelet(dGBridge, "DG_Cs");
        
        Codelet dGProcess=new DGProcess();
        dGProcess.setName("DG_PROCESS");
        m.insertCodelet(dGProcess, "DG_Cs");
        
        Codelet mPFC=new MPFC();
        mPFC.setName("MPFC");
        m.insertCodelet(mPFC, "PFC_Cs");
        
        Codelet mPFCProcess1=new MPFCProcess1();
        mPFCProcess1.setName("MPFC_PROCESS_1");
        m.insertCodelet(mPFCProcess1, "PFC_Cs");
        
        Codelet dLPFC=new DLPFC();
        dLPFC.setName("DLPFC");
        m.insertCodelet(dLPFC, "PFC_Cs");
        
        Codelet dLPFCPlanning1=new DLPFCPlanning();
        dLPFCPlanning1.setName("DLPFC_PLANNING");
        m.insertCodelet(dLPFCPlanning1, "PFC_Cs");
        
        Codelet dLPFCBaseController=new DLPFCBaseController();
        dLPFCBaseController.setName("DLPFC_PLANNING");
        m.insertCodelet(dLPFCBaseController, "PFC_Cs");
        
        Codelet vLPFC=new VLPFC();
        vLPFC.setName("VLPFC");
        m.insertCodelet(vLPFC, "PFC_Cs");
        
        Codelet vLPFCProcess1=new VLPFCProcess1();
        vLPFCProcess1.setName("VLPFC_PROCESS_1");
        m.insertCodelet(vLPFCProcess1, "PFC_Cs");
        
        Codelet vLPFCProcess2=new VLPFCProcess2();
        vLPFCProcess2.setName("VLPFC_PROCESS_2");
        m.insertCodelet(vLPFCProcess2, "PFC_Cs");
        
        Codelet sB=new SB();
        sB.setName("SB");
        m.insertCodelet(sB, "SB_Cs");
       
        m.start();
        return(m);
    }
    
    public App() {
        Mind m = prepareMind();
        // The next line can be commented if you don't want the Desktop MindViewer
        createAndShowGUI(m);
        // The next line can be commented if you don't use the MindViewer Web
        RESTServer rs = new RESTServer(m,5001,true);
    }
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        
    }
}
